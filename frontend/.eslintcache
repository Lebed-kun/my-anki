[{"/home/user/Documents/projects/my-anki/frontend/src/index.tsx":"1","/home/user/Documents/projects/my-anki/frontend/src/components/app/index.tsx":"2","/home/user/Documents/projects/my-anki/frontend/src/components/random-card/answer.tsx":"3","/home/user/Documents/projects/my-anki/frontend/src/components/choose-deck/deck-button.tsx":"4","/home/user/Documents/projects/my-anki/frontend/src/components/random-card/hooks.ts":"5","/home/user/Documents/projects/my-anki/frontend/src/constants.ts":"6","/home/user/Documents/projects/my-anki/frontend/src/components/random-card/card.tsx":"7","/home/user/Documents/projects/my-anki/frontend/src/components/random-card/index.tsx":"8"},{"size":28,"mtime":1612114484608,"results":"9","hashOfConfig":"10"},{"size":468,"mtime":1612121554046,"results":"11","hashOfConfig":"10"},{"size":1034,"mtime":1612124492111,"results":"12","hashOfConfig":"10"},{"size":531,"mtime":1612115881699,"results":"13","hashOfConfig":"10"},{"size":1445,"mtime":1612120245671,"results":"14","hashOfConfig":"10"},{"size":52,"mtime":1612115155005,"results":"15","hashOfConfig":"10"},{"size":441,"mtime":1612123980210,"results":"16","hashOfConfig":"10"},{"size":2713,"mtime":1612124308926,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"1j7z2eb",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/user/Documents/projects/my-anki/frontend/src/index.tsx",["37"],"import React from \"react\";\n\n","/home/user/Documents/projects/my-anki/frontend/src/components/app/index.tsx",[],"/home/user/Documents/projects/my-anki/frontend/src/components/random-card/answer.tsx",[],"/home/user/Documents/projects/my-anki/frontend/src/components/choose-deck/deck-button.tsx",["38"],"import React from \"react\";\nimport { useHistory } from \"react-router\";\n\ninterface Props {\n    deckName: string;\n    title: string;\n}\n\nconst DeckButton: React.FC<Props> = ({ deckName, title }) => {\n    const history = useHistory();\n    \n    const onClick = React.useCallback(\n        () => {\n            history.push(\n                `/deck/${deckName}`\n            );\n        },\n        [deckName]\n    );\n    \n    return (\n        <button onClick={onClick}>\n            {title}\n        </button>\n    )\n}\n\nexport default DeckButton;\n","/home/user/Documents/projects/my-anki/frontend/src/components/random-card/hooks.ts",["39"],"import { useState, useEffect, useCallback } from \"react\";\nimport { RandStack } from \"../../utils\";\nimport { useForceUpdate } from \"../../hooks\";\nimport { fetchCardRefs, fetchCardSides } from \"./api\";\n\ninterface Card {\n    front: string;\n    back: string;\n}\n\nexport const useCards = (deckName?: string) => {\n    const forceUpdate = useForceUpdate();\n    const [cardRefs, setCardRefs] = useState<RandStack<string>>();\n\n    useEffect(\n        () => {\n            if (deckName) {\n                fetchCardRefs(deckName).then(\n                    cardRefs => {\n                        setCardRefs(\n                            new RandStack(cardRefs)\n                        );\n                    }\n                ).catch(err => console.error(err));\n            }\n        },\n        [deckName]\n    );\n\n    const takeCard = useCallback(\n        async (): Promise<Card | undefined> => {\n            if (\n                (typeof cardRefs !== \"undefined\") &&\n                (typeof deckName !== \"undefined\")\n            ) {\n                const cardName = cardRefs.pop();\n\n                if (typeof cardName !== \"undefined\") {\n                    const cardSides = await fetchCardSides(deckName, cardName);\n                    \n                    setCardRefs(cardRefs);\n                    forceUpdate();\n\n                    return cardSides\n                }\n            }\n        },\n        [deckName, cardRefs]\n    );\n\n    return { takeCard };\n}","/home/user/Documents/projects/my-anki/frontend/src/constants.ts",[],"/home/user/Documents/projects/my-anki/frontend/src/components/random-card/card.tsx",[],"/home/user/Documents/projects/my-anki/frontend/src/components/random-card/index.tsx",[],{"ruleId":"40","severity":1,"message":"41","line":1,"column":8,"nodeType":"42","messageId":"43","endLine":1,"endColumn":13},{"ruleId":"44","severity":1,"message":"45","line":18,"column":9,"nodeType":"46","endLine":18,"endColumn":19,"suggestions":"47"},{"ruleId":"44","severity":1,"message":"48","line":48,"column":9,"nodeType":"46","endLine":48,"endColumn":29,"suggestions":"49"},"@typescript-eslint/no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook React.useCallback has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["50"],"React Hook useCallback has a missing dependency: 'forceUpdate'. Either include it or remove the dependency array.",["51"],{"desc":"52","fix":"53"},{"desc":"54","fix":"55"},"Update the dependencies array to be: [deckName, history]",{"range":"56","text":"57"},"Update the dependencies array to be: [cardRefs, deckName, forceUpdate]",{"range":"58","text":"59"},[386,396],"[deckName, history]",[1390,1410],"[cardRefs, deckName, forceUpdate]"]