[{"/home/user/Documents/projects/my-anki/frontend/src/index.tsx":"1","/home/user/Documents/projects/my-anki/frontend/src/components/app/index.tsx":"2","/home/user/Documents/projects/my-anki/frontend/src/components/random-card/answer.tsx":"3","/home/user/Documents/projects/my-anki/frontend/src/components/choose-deck/deck-button.tsx":"4","/home/user/Documents/projects/my-anki/frontend/src/components/random-card/hooks.ts":"5","/home/user/Documents/projects/my-anki/frontend/src/constants.ts":"6","/home/user/Documents/projects/my-anki/frontend/src/components/random-card/card.tsx":"7","/home/user/Documents/projects/my-anki/frontend/src/components/random-card/index.tsx":"8"},{"size":187,"mtime":1612124912386,"results":"9","hashOfConfig":"10"},{"size":468,"mtime":1612121554046,"results":"11","hashOfConfig":"10"},{"size":1034,"mtime":1612124492111,"results":"12","hashOfConfig":"10"},{"size":531,"mtime":1612124912382,"results":"13","hashOfConfig":"10"},{"size":1445,"mtime":1612120245671,"results":"14","hashOfConfig":"10"},{"size":52,"mtime":1612115155005,"results":"15","hashOfConfig":"10"},{"size":441,"mtime":1612124912386,"results":"16","hashOfConfig":"10"},{"size":2713,"mtime":1612124308926,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1j7z2eb",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/user/Documents/projects/my-anki/frontend/src/index.tsx",[],"/home/user/Documents/projects/my-anki/frontend/src/components/app/index.tsx",[],"/home/user/Documents/projects/my-anki/frontend/src/components/random-card/answer.tsx",[],"/home/user/Documents/projects/my-anki/frontend/src/components/choose-deck/deck-button.tsx",["35"],"/home/user/Documents/projects/my-anki/frontend/src/components/random-card/hooks.ts",["36"],"import { useState, useEffect, useCallback } from \"react\";\nimport { RandStack } from \"../../utils\";\nimport { useForceUpdate } from \"../../hooks\";\nimport { fetchCardRefs, fetchCardSides } from \"./api\";\n\ninterface Card {\n    front: string;\n    back: string;\n}\n\nexport const useCards = (deckName?: string) => {\n    const forceUpdate = useForceUpdate();\n    const [cardRefs, setCardRefs] = useState<RandStack<string>>();\n\n    useEffect(\n        () => {\n            if (deckName) {\n                fetchCardRefs(deckName).then(\n                    cardRefs => {\n                        setCardRefs(\n                            new RandStack(cardRefs)\n                        );\n                    }\n                ).catch(err => console.error(err));\n            }\n        },\n        [deckName]\n    );\n\n    const takeCard = useCallback(\n        async (): Promise<Card | undefined> => {\n            if (\n                (typeof cardRefs !== \"undefined\") &&\n                (typeof deckName !== \"undefined\")\n            ) {\n                const cardName = cardRefs.pop();\n\n                if (typeof cardName !== \"undefined\") {\n                    const cardSides = await fetchCardSides(deckName, cardName);\n                    \n                    setCardRefs(cardRefs);\n                    forceUpdate();\n\n                    return cardSides\n                }\n            }\n        },\n        [deckName, cardRefs]\n    );\n\n    return { takeCard };\n}","/home/user/Documents/projects/my-anki/frontend/src/constants.ts",[],"/home/user/Documents/projects/my-anki/frontend/src/components/random-card/card.tsx",[],"/home/user/Documents/projects/my-anki/frontend/src/components/random-card/index.tsx",[],{"ruleId":"37","severity":1,"message":"38","line":18,"column":9,"nodeType":"39","endLine":18,"endColumn":19,"suggestions":"40"},{"ruleId":"37","severity":1,"message":"41","line":48,"column":9,"nodeType":"39","endLine":48,"endColumn":29,"suggestions":"42"},"react-hooks/exhaustive-deps","React Hook React.useCallback has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["43"],"React Hook useCallback has a missing dependency: 'forceUpdate'. Either include it or remove the dependency array.",["44"],{"desc":"45","fix":"46"},{"desc":"47","fix":"48"},"Update the dependencies array to be: [deckName, history]",{"range":"49","text":"50"},"Update the dependencies array to be: [cardRefs, deckName, forceUpdate]",{"range":"51","text":"52"},[386,396],"[deckName, history]",[1390,1410],"[cardRefs, deckName, forceUpdate]"]